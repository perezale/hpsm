// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: hpsm.proto

package hpsm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HPSMClient is the client API for HPSM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HPSMClient interface {
	ProcessHashes(ctx context.Context, in *HPSMRequest, opts ...grpc.CallOption) (*RangeResponse, error)
}

type hPSMClient struct {
	cc grpc.ClientConnInterface
}

func NewHPSMClient(cc grpc.ClientConnInterface) HPSMClient {
	return &hPSMClient{cc}
}

func (c *hPSMClient) ProcessHashes(ctx context.Context, in *HPSMRequest, opts ...grpc.CallOption) (*RangeResponse, error) {
	out := new(RangeResponse)
	err := c.cc.Invoke(ctx, "/hpsmgprpc.HPSM/ProcessHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HPSMServer is the server API for HPSM service.
// All implementations must embed UnimplementedHPSMServer
// for forward compatibility
type HPSMServer interface {
	ProcessHashes(context.Context, *HPSMRequest) (*RangeResponse, error)
	mustEmbedUnimplementedHPSMServer()
}

// UnimplementedHPSMServer must be embedded to have forward compatible implementations.
type UnimplementedHPSMServer struct {
}

func (UnimplementedHPSMServer) ProcessHashes(context.Context, *HPSMRequest) (*RangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessHashes not implemented")
}
func (UnimplementedHPSMServer) mustEmbedUnimplementedHPSMServer() {}

// UnsafeHPSMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HPSMServer will
// result in compilation errors.
type UnsafeHPSMServer interface {
	mustEmbedUnimplementedHPSMServer()
}

func RegisterHPSMServer(s grpc.ServiceRegistrar, srv HPSMServer) {
	s.RegisterService(&HPSM_ServiceDesc, srv)
}

func _HPSM_ProcessHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HPSMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPSMServer).ProcessHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hpsmgprpc.HPSM/ProcessHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPSMServer).ProcessHashes(ctx, req.(*HPSMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HPSM_ServiceDesc is the grpc.ServiceDesc for HPSM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HPSM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hpsmgprpc.HPSM",
	HandlerType: (*HPSMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessHashes",
			Handler:    _HPSM_ProcessHashes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hpsm.proto",
}
