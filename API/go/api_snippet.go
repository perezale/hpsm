/*
 * HPSM
 *
 * This is the SCANOSS HPSM API.
 *
 * API version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"
	"os/exec"
	//u "scanoss.com/hpsm/utils"
	proc "scanoss.com/hpsm/pkg"
)

func Wget(url string, filepath string) error {
	// run shell `wget URL -O filepath`
	fmt.Printf("downloading %s -> %s\n", url, filepath)
	cmd := exec.Command("wget", url, "-O", filepath)
	return cmd.Run()
}

func fileContents(md5 string) (string, error) {

	out, err := exec.Command("scanoss", "-k", md5).Output()

	if err != nil {
		return "", err
	}
	// Return results
	return string(out), nil
}

func HPSMWorker(id int, jobs <-chan HpsmReqItem, resultsChan chan<- HpsmRespItem) {
	//
	var respAux HpsmRespItem
	for job := range jobs {
		var hashRemote []uint8
	
		//Local access
		remoteSrc, _ := fileContents(job.MD5)
		hashRemote = proc.GetLineHashesFromSource(remoteSrc)
		
/*			//Remote access
			Wget("https://osskb.org/api/file_contents/"+job.MD5, "/tmp/"+job.MD5)
			hashRemote = proc.GetLineHashes("/tmp/" + job.MD5)
			u.Rm("/tmp/" + job.MD5)
*/
		
		hashLocal := job.Hashes
		snippets := proc.Compare(hashLocal, hashRemote,uint32(job.Threshold))

		respAux.MD5 = job.MD5

		for j := range snippets {
			var rangeLocalAux ModelRange
			var rangeRemoteAux ModelRange
			rangeLocalAux.Start = int32(snippets[j].LStart) + 1
			rangeLocalAux.End = int32(snippets[j].LEnd) + 1
			rangeRemoteAux.Start = int32(snippets[j].RStart) + 1
			rangeRemoteAux.End = int32(snippets[j].REnd) + 1
			var s Snippet
			s.Local = &rangeLocalAux
			s.Remote = &rangeRemoteAux
			respAux.Snippets = append(respAux.Snippets, s)
		}
		resultsChan <- respAux

	}
}

func HPSM(req []HpsmReqItem) []HpsmRespItem {

	items := req
	numJobs := len(req)

	jobs := make(chan HpsmReqItem)
	results := make(chan HpsmRespItem, numJobs)

	for w := 1; w <= 10; w++ {
		go HPSMWorker(w, jobs, results)
	}

	for job := range items {
		jobs <- items[job]
	}

	close(jobs)
	var resp []HpsmRespItem
	for a := 1; a <= numJobs; a++ {
		res := <-results
		resp = append(resp, res)
	}
	return resp

}

func AdjustSnippet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	var req []HpsmReqItem
	var resp []HpsmRespItem
	err := json.NewDecoder(r.Body).Decode(&req)
	resp = HPSM(req)
	out, _ := json.Marshal(resp)
	fmt.Fprint(w, string(out))
	fmt.Println(out)
	fmt.Println(err)

}
